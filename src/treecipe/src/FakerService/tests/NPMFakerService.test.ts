import { IFakerService } from "../IFakerService";
import { NPMFakerService } from "../NPMFakerService";


describe('getMapSalesforceFieldToFakerValue', () => {

    let fakerService = new NPMFakerService();
    const fieldTypeToNPMFakerMappings = fakerService.getMapSalesforceFieldToFakerValue();
    
    
    const placeholderForXMLMarkupDependentValue = 'GENERATED BY FIELD XML MARKUP';
    const referenceValuePlaceholder = '"TODO -- REFERENCE ID REQUIRED"';
    const seeOnePagerPlaceholder = '"SEE ONE PAGER - https://gist.github.com/jdschleicher/4abfd188a933598833285ee76e560445"';

    console.log("heeyooo : " );  


    test('Text field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['text']).toBe('{{ faker.lorem.text(50) }}');
    });

    test('TextArea field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['textarea']).toBe('{{ faker.lorem.paragraph() }}');
    });

    test('LongTextArea field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['longtextarea']).toBe('{{ faker.lorem.text(1000) }}');
    });

    test('RichTextArea field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['richtextarea']).toBe('{{ faker.lorem.text(1000) }}');
    });

    test('Email field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['email']).toBe('{{ faker.internet.email() }}');
    });

    test('Phone field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['phone']).toBe('{{ faker.phone.number() }}');
    });

    test('Url field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['url']).toBe('{{ faker.internet.url() }}');
    });

    test('Number field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['number']).toBe('{{ faker.datatype.number({ min: 0, max: 999999 }) }}');
    });

    test('Currency field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['currency']).toBe('{{ faker.finance.amount(0, 999999, 2) }}');
    });

    test('Percent field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['percent']).toBe('{{ faker.finance.amount(0, 99, 2) }}');
    });

    test('Date field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['date']).toBe('{{ faker.date.between("2023-01-01", "2024-01-01").toISOString().split("T")[0] }}');
    });

    test('DateTime field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['datetime']).toBe('{{ faker.date.between("2023-01-01", "2024-01-01").toISOString() }}');
    });

    test('Time field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['time']).toBe('{{ faker.date.recent().toISOString().split("T")[1] }}');
    });

    test('Picklist field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['picklist']).toBe(placeholderForXMLMarkupDependentValue);
    });

    test('MultiselectPicklist field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['multiselectpicklist']).toBe(placeholderForXMLMarkupDependentValue);
    });

    test('Checkbox field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['checkbox']).toBe('{{ faker.datatype.boolean() }}');
    });

    test('Lookup field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['lookup']).toBe(referenceValuePlaceholder);
    });

    test('MasterDetail field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['masterdetail']).toBe(referenceValuePlaceholder);
    });

    test('Formula field returns correct message', () => {
        expect(fieldTypeToNPMFakerMappings['formula']).toBe('Formula fields are calculated, not generated');
    });

    test('Location field returns correct npm faker expression', () => {
        expect(fieldTypeToNPMFakerMappings['location']).toBe(seeOnePagerPlaceholder);
    });

    test('All Salesforce field types have a corresponding mapping', () => {
        const expectedFields = [
            'text', 'textarea', 'longtextarea', 'richtextarea', 'email', 
            'phone', 'url', 'number', 'currency', 'percent', 'date', 
            'datetime', 'time', 'picklist', 'multiselectpicklist', 'checkbox', 
            'lookup', 'masterdetail', 'formula', 'location'
        ];

        expectedFields.forEach(field => {
            expect(fieldTypeToNPMFakerMappings).toHaveProperty(field);
        });
    });

    test('All mapping values are strings', () => {
        Object.values(fieldTypeToNPMFakerMappings).forEach(value => {
            expect(typeof value).toBe('string');
        });
    });

});