import { RecordTypeWrapper } from "../../RecordTypeService/RecordTypesWrapper";
import { IFakerService } from "../IFakerService";

export class NPMFakerService implements IFakerService {

    generateTabs(tabCount: number):string {
        const spacesPerTab = 4;
        return ' '.repeat(spacesPerTab * tabCount);
    }

    buildDependentPicklistRecipeFakerValue(controllingValueToPicklistOptions: Record<string, string[]>, 
                                            recordTypeApiToRecordTypeWrapperMap: Record<string, RecordTypeWrapper>,
                                            controllingField: string,
                                            fieldApiName: string
                                        ): string {
    
        let fakeDependentPicklistRecipeValue = "";
        let allMultiSelectChoiceRecipe:string;
        for ( const controllingValueKey in controllingValueToPicklistOptions ) {
            
            let picklistValuesAvailableForChoice = controllingValueToPicklistOptions[controllingValueKey];
            
            let randomChoicesBreakdown:string;

            picklistValuesAvailableForChoice.forEach( value => {
                if (randomChoicesBreakdown) {
                    randomChoicesBreakdown += `\n${this.generateTabs(5)}- ${value}`;
                } else {
                    randomChoicesBreakdown = `- ${value}`;
                }
            });


            let multiSelectChoiceRecipe = 
`${this.generateTabs(2)}- choice:
${this.generateTabs(3)}when: "${controllingField} == '${controllingValueKey}'"
${this.generateTabs(3)}pick:
${this.generateTabs(4)}random_choice:
${this.generateTabs(5)}${randomChoicesBreakdown}`;


            if (!(allMultiSelectChoiceRecipe)) {
                allMultiSelectChoiceRecipe = multiSelectChoiceRecipe;
            } else {
                const lineBreakMultiSelectChoiceRecipe = `\n${multiSelectChoiceRecipe}`;
                allMultiSelectChoiceRecipe += lineBreakMultiSelectChoiceRecipe;
            }
        }

        if (fakeDependentPicklistRecipeValue) {
            fakeDependentPicklistRecipeValue += `\n${this.generateTabs(2)}${allMultiSelectChoiceRecipe}`;
        } else {
            fakeDependentPicklistRecipeValue = `\n${this.generateTabs(1.5)}if:`;
            fakeDependentPicklistRecipeValue += `\n${allMultiSelectChoiceRecipe}`;
        }

        return fakeDependentPicklistRecipeValue;

    }

    buildPicklistRecipeValueByXMLFieldDetail(availablePicklistChoices: string[], 
                                                recordTypeApiToRecordTypeWrapperMap: Record<string, RecordTypeWrapper>,
                                                associatedFieldApiName): string {
         
        const joinedChoices = availablePicklistChoices.map(option => `'${option}'`).join(',');
        const fakeMultiSelectRecipeValue = `faker.helpers.arrayElement([${joinedChoices}])`;
        return fakeMultiSelectRecipeValue;

    }

    buildMultiSelectPicklistRecipeValueByXMLFieldDetail(availablePicklistChoices: string[],
                                                            recordTypeApiToRecordTypeWrapperMap: Record<string, RecordTypeWrapper>,
                                                            associatedFieldApiName
                                                        ): string {
   
        const joinedChoices = availablePicklistChoices.map(option => `'${option}'`).join(',');
        const fakeMultiSelectRecipeValue = `faker.helpers.arrayElements([${joinedChoices}])`;
        return fakeMultiSelectRecipeValue;

    }

    getMapSalesforceFieldToFakerValue():Record<string, string> {

        const salesforceFieldToNPMFakerMap: Record<string, string> = {
            'text': '{{ faker.lorem.text(50) }}',
            'textarea': '{{ faker.lorem.paragraph() }}',
            'longtextarea': '{{ faker.lorem.text(1000) }}',
            'html': '{{ faker.lorem.text(1000) }}',
            'email': '{{ faker.internet.email() }}',
            'phone': '{{ faker.phone.number() }}',
            'url': '{{ faker.internet.url() }}',
            'number': '{{ faker.datatype.number({ min: 0, max: 999999 }) }}',
            'currency': '{{ faker.finance.amount(0, 999999, 2) }}',
            'percent': '{{ faker.finance.amount(0, 99, 2) }}',
            'date': '{{ faker.date.between("2023-01-01", "2024-01-01").toISOString().split("T")[0] }}',
            'datetime': '{{ faker.date.between("2023-01-01", "2024-01-01").toISOString() }}',
            'time': '{{ faker.date.recent().toISOString().split("T")[1] }}',
            'checkbox': '{{ faker.datatype.boolean() }}',
            'picklist': 'GENERATED BY FIELD XML MARKUP',
            'multiselectpicklist': 'GENERATED BY FIELD XML MARKUP',
            'lookup': '### TODO -- REFERENCE ID REQUIRED',
            'masterdetail': '### TODO -- REFERENCE ID REQUIRED',
            'formula': 'Formula fields are calculated, not generated',
            'location': '"### TODO -- SEE ONE PAGER - https://gist.github.com/jdschleicher/4abfd188a933598833285ee76e560445"',
        };

        return salesforceFieldToNPMFakerMap;
    }

    getOOTBObjectApiNameToFieldApiNameMap(): Record<string, Record<string, string>> {

        const salesforceFakerMappings: Record<string, Record<string, string>> = {
            
            "Account": {
                "Name": "{{faker.company.name()}}",
                "AccountNumber": "{{faker.string.numeric(8)}}",
                "AnnualRevenue": "{{faker.string.numeric(7)}}",
                "BillingStreet": "{{faker.location.streetAddress()}}",
                "BillingCity": "{{faker.location.city()}}",
                "BillingState": "{{faker.location.state()}}",
                "BillingPostalCode": "{{faker.location.zipCode()}}",
                "BillingCountry": "{{faker.location.country()}}",
                "Description": "{{faker.company.catchPhrase()}}",
                "Industry": "{{faker.helpers.arrayElement(['Technology', 'Finance', 'Healthcare', 'Retail', 'Manufacturing', 'Education'])}}",
                "NumberOfEmployees": "{{faker.string.numeric(4)}}",
                "Phone": "{{faker.phone.number()}}",
                "Rating": "{{faker.helpers.arrayElement(['Hot', 'Warm', 'Cold'])}}",
                "ShippingStreet": "{{faker.location.streetAddress()}}",
                "ShippingCity": "{{faker.location.city()}}",
                "ShippingState": "{{faker.location.state()}}",
                "ShippingPostalCode": "{{faker.location.zipCode()}}",
                "ShippingCountry": "{{faker.location.country()}}",
                "Sic": "{{faker.string.numeric(4)}}",
                "Type": "{{faker.helpers.arrayElement(['Customer', 'Partner', 'Prospect'])}}",
                "Website": "{{faker.internet.domainName()}}"
                },
                
            "Contact": {
                "FirstName": "{{faker.person.firstName()}}",
                "LastName": "{{faker.person.lastName()}}",
                "Email": "{{faker.internet.email()}}",
                "Phone": "{{faker.phone.number()}}",
                "MobilePhone": "{{faker.phone.number()}}",
                "Title": "{{faker.person.jobTitle()}}",
                "Department": "{{faker.helpers.arrayElement(['Sales', 'Marketing', 'IT', 'Finance', 'HR', 'Operations'])}}",
                "Birthdate": "{{faker.date.birthdate()}}",
                "Description": "{{faker.lorem.paragraph()}}",
                "MailingStreet": "{{faker.location.streetAddress()}}",
                "MailingCity": "{{faker.location.city()}}",
                "MailingState": "{{faker.location.state()}}",
                "MailingPostalCode": "{{faker.location.zipCode()}}",
                "MailingCountry": "{{faker.location.country()}}",
                "OtherStreet": "{{faker.location.streetAddress()}}",
                "OtherCity": "{{faker.location.city()}}",
                "OtherState": "{{faker.location.state()}}",
                "OtherPostalCode": "{{faker.location.zipCode()}}",
                "OtherCountry": "{{faker.location.country()}}",
                "LeadSource": "{{faker.helpers.arrayElement(['Web', 'Phone Inquiry', 'Partner', 'Purchased List', 'Other'])}}",
                "Salutation": "{{faker.helpers.arrayElement(['Mr.', 'Ms.', 'Mrs.', 'Dr.'])}}",
                "AssistantName": "{{faker.person.fullName()}}",
                "AssistantPhone": "{{faker.phone.number()}}"
                },
                
            "Opportunity": {
                "Name": "{{faker.company.catchPhrase()}}",
                "Amount": "{{faker.string.numeric(6)}}.00",
                "CloseDate": "{{faker.date.between({from: '-30d', to: '+90d'})}}",
                "Description": "{{faker.lorem.paragraph()}}",
                "ExpectedRevenue": "{{faker.string.numeric(6)}}.00",
                "LeadSource": "{{faker.helpers.arrayElement(['Web', 'Phone Inquiry', 'Partner', 'Purchased List', 'Other'])}}",
                "NextStep": "{{faker.lorem.sentence()}}",
                "Probability": "{{faker.string.numeric(2)}}.0",
                "StageName": "{{faker.helpers.arrayElement(['Prospecting', 'Qualification', 'Needs Analysis', 'Value Proposition', 'Id. Decision Makers', 'Perception Analysis', 'Proposal/Price Quote', 'Negotiation/Review', 'Closed Won', 'Closed Lost'])}}",
                "Type": "{{faker.helpers.arrayElement(['New Customer', 'Existing Customer - Upgrade', 'Existing Customer - Replacement', 'Existing Customer - Downgrade'])}}",
                "ForecastCategory": "{{faker.helpers.arrayElement(['Pipeline', 'Best Case', 'Commit', 'Closed'])}}"
                },
                
            "Lead": {
                "FirstName": "{{faker.person.firstName()}}",
                "LastName": "{{faker.person.lastName()}}",
                "Company": "{{faker.company.name()}}",
                "Title": "{{faker.person.jobTitle()}}",
                "Email": "{{faker.internet.email()}}",
                "Phone": "{{faker.phone.number()}}",
                "MobilePhone": "{{faker.phone.number()}}",
                "Street": "{{faker.location.streetAddress()}}",
                "City": "{{faker.location.city()}}",
                "State": "{{faker.location.state()}}",
                "PostalCode": "{{faker.location.zipCode()}}",
                "Country": "{{faker.location.country()}}",
                "Industry": "{{faker.helpers.arrayElement(['Technology', 'Finance', 'Healthcare', 'Retail', 'Manufacturing', 'Education'])}}",
                "AnnualRevenue": "{{faker.string.numeric(7)}}",
                "Description": "{{faker.lorem.paragraph()}}",
                "LeadSource": "{{faker.helpers.arrayElement(['Web', 'Phone Inquiry', 'Partner', 'Purchased List', 'Other'])}}",
                "Rating": "{{faker.helpers.arrayElement(['Hot', 'Warm', 'Cold'])}}",
                "Status": "{{faker.helpers.arrayElement(['Open - Not Contacted', 'Working - Contacted', 'Closed - Converted', 'Closed - Not Converted'])}}",
                "NumberOfEmployees": "{{faker.string.numeric(4)}}"
                },
                
            "Case": {
                "Subject": "{{faker.company.catchPhrase()}}",
                "Description": "{{faker.lorem.paragraph()}}",
                "Status": "{{faker.helpers.arrayElement(['New', 'Working', 'Escalated', 'Closed'])}}",
                "Origin": "{{faker.helpers.arrayElement(['Email', 'Phone', 'Web', 'Social'])}}",
                "Priority": "{{faker.helpers.arrayElement(['High', 'Medium', 'Low'])}}",
                "Type": "{{faker.helpers.arrayElement(['Problem', 'Feature Request', 'Question'])}}",
                "Reason": "{{faker.helpers.arrayElement(['Installation', 'Equipment Complexity', 'Performance', 'Breakdown', 'Equipment Design', 'Feedback'])}}",
                "SuppliedName": "{{faker.person.fullName()}}",
                "SuppliedEmail": "{{faker.internet.email()}}",
                "SuppliedPhone": "{{faker.phone.number()}}",
                "SuppliedCompany": "{{faker.company.name()}}"
                },
                
            "Campaign": {
                "Name": "{{faker.company.bs()}}",
                "Type": "{{faker.helpers.arrayElement(['Email', 'Webinar', 'Conference', 'Direct Mail', 'Advertisement'])}}",
                "Status": "{{faker.helpers.arrayElement(['Planned', 'In Progress', 'Completed', 'Aborted'])}}",
                "StartDate": "{{faker.date.between({from: '-30d', to: '+90d'})}}",
                "EndDate": "{{faker.date.between({from: '+91d', to: '+180d'})}}",
                "Description": "{{faker.lorem.paragraph()}}",
                "BudgetedCost": "{{faker.string.numeric(5)}}.00",
                "ActualCost": "{{faker.string.numeric(5)}}.00",
                "ExpectedRevenue": "{{faker.string.numeric(6)}}.00",
                "ExpectedResponse": "{{faker.string.numeric(2)}}.0",
                "NumberOfContacts": "{{faker.string.numeric(3)}}",
                "NumberOfLeads": "{{faker.string.numeric(3)}}",
                "NumberOfOpportunities": "{{faker.string.numeric(2)}}",
                "NumberOfResponses": "{{faker.string.numeric(3)}}"
                },
                
            "Task": {
                "Subject": "{{faker.company.catchPhrase()}}",
                "Description": "{{faker.lorem.paragraph()}}",
                "Status": "{{faker.helpers.arrayElement(['Not Started', 'In Progress', 'Completed', 'Waiting on someone else', 'Deferred'])}}",
                "Priority": "{{faker.helpers.arrayElement(['High', 'Normal', 'Low'])}}",
                "ActivityDate": "{{faker.date.between({from: '-7d', to: '+30d'})}}",
                "Type": "{{faker.helpers.arrayElement(['Call', 'Meeting', 'Other'])}}",
                "CallType": "{{faker.helpers.arrayElement(['Inbound', 'Outbound'])}}"
                },
                
            "Event": {
                "Subject": "{{faker.company.catchPhrase()}}",
                "Description": "{{faker.lorem.paragraph()}}",
                "StartDateTime": "{{faker.date.between({from: '-7d', to: '+30d'})}}",
                "EndDateTime": "{{faker.date.between({from: '+31d', to: '+38d'})}}",
                "Location": "{{faker.location.streetAddress()}}, {{faker.location.city()}}, {{faker.location.state()}} {{faker.location.zipCode()}}",
                "ShowAs": "{{faker.helpers.arrayElement(['Busy', 'Free', 'OutOfOffice', 'Working'])}}",
                "Type": "{{faker.helpers.arrayElement(['Meeting', 'Call', 'Other'])}}",
                "IsAllDayEvent": "{{faker.helpers.arrayElement(['true', 'false'])}}"
                },
                
            "Product2": {
                "Name": "{{faker.commerce.productName()}}",
                "Description": "{{faker.lorem.paragraph()}}",
                "ProductCode": "{{faker.commerce.product()}}-{{faker.string.alphanumeric(6)}}",
                "IsActive": "{{faker.helpers.arrayElement(['true', 'false'])}}",
                "Family": "{{faker.helpers.arrayElement(['Hardware', 'Software', 'Services', 'Other'])}}",
                "QuantityUnitOfMeasure": "{{faker.helpers.arrayElement(['Each', 'Case', 'Box', 'Pallet'])}}",
                "DisplayUrl": "{{faker.internet.url()}}",
                "ExternalId": "{{faker.string.uuid()}}"
                },
                
            "PriceBook2": {
                "Name": "{{faker.company.bs()}} Price Book",
                "Description": "{{faker.lorem.paragraph()}}",
                "IsActive": "{{faker.helpers.arrayElement(['true', 'false'])}}"
                },
                
            "Asset": {
                "Name": "{{faker.commerce.productName()}}",
                "Description": "{{faker.lorem.paragraph()}}",
                "InstallDate": "{{faker.date.between({from: '-365d', to: 'today'})}}",
                "PurchaseDate": "{{faker.date.between({from: '-730d', to: '-366d'})}}",
                "SerialNumber": "{{faker.string.alphanumeric(10)}}-{{faker.string.numeric(6)}}",
                "Status": "{{faker.helpers.arrayElement(['Purchased', 'Shipped', 'Installed', 'Registered'])}}",
                "Price": "{{faker.string.numeric(5)}}.00",
                "Quantity": "{{faker.string.numeric(2)}}"
                },
                
            "Contract": {
                "Status": "{{faker.helpers.arrayElement(['Draft', 'In Approval Process', 'Activated', 'Terminated'])}}",
                "StartDate": "{{faker.date.between({from: '-30d', to: '+90d'})}}",
                "ContractTerm": "{{faker.string.numeric(2)}}",
                "OwnerExpirationNotice": "{{faker.helpers.arrayElement(['15', '30', '45', '60', '90'])}}",
                "Description": "{{faker.lorem.paragraph()}}",
                "BillingStreet": "{{faker.location.streetAddress()}}",
                "BillingCity": "{{faker.location.city()}}",
                "BillingState": "{{faker.location.state()}}",
                "BillingPostalCode": "{{faker.location.zipCode()}}",
                "BillingCountry": "{{faker.location.country()}}",
                "ShippingStreet": "{{faker.location.streetAddress()}}",
                "ShippingCity": "{{faker.location.city()}}",
                "ShippingState": "{{faker.location.state()}}",
                "ShippingPostalCode": "{{faker.location.zipCode()}}",
                "ShippingCountry": "{{faker.location.country()}}",
                "SpecialTerms": "{{faker.lorem.paragraph()}}"
            }
            
        };
    
    
        return salesforceFakerMappings;
    
    }

}