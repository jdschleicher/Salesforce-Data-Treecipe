

import { IFakerService } from "../IFakerService";

export class SnowfakeryFakerService implements IFakerService {

    openingRecipeSyntax:string = "${{";
    closingRecipeSyntax:string = "}}";

    generateTabs(tabCount: number):string {
        const spacesPerTab = 4;
        return ' '.repeat(spacesPerTab * tabCount);
    }

    getMapSalesforceFieldToFakerValue():Record<string, string> {

        const salesforceFieldToSnowfakeryMap: Record<string, string> = {
            'text': '${{fake.text(max_nb_chars=50)}}',
            'textarea': '${{fake.paragraph()}}',
            'longtextarea': '${{fake.text(max_nb_chars=1000)}}',
            'richtextarea': '${{fake.text(max_nb_chars=1000)}}',
            'email': '${{fake.email()}}',
            'phone': '${{fake.phone_number()}}',
            'url': '${{fake.url()}}',
            'number': '${{fake.random_int(min=0, max=999999)}}',
            'currency': '${{fake.pydecimal(left_digits=6, right_digits=2, positive=True)}}',
            'percent': '${{fake.pydecimal(left_digits=2, right_digits=2, positive=True)}}',
            'date': '${{date(fake.date_between(start_date="-1y", end_date="today"))}}',
            'datetime': '${{fake.date_time_between(start_date="-1y", end_date="now")}}',
            'time': '${{fake.time()}}',
            'picklist': 'GENERATED BY FIELD XML MARKUP',
            'multiselectpicklist': 'GENERATED BY FIELD XML MARKUP',
            'checkbox': '${{fake.boolean()}}',
            'lookup': '"TODO -- REFERENCE ID REQUIRED"',
            'masterdetail': '"TODO -- REFERENCE ID REQUIRED"',
            'formula': 'Formula fields are calculated, not generated',
            'location': '"SEE ONE PAGER - https://gist.github.com/jdschleicher/4abfd188a933598833285ee76e560445"'
        };
    
        return salesforceFieldToSnowfakeryMap;

    }

    buildMultiSelectPicklistRecipeValueByXMLFieldDetail(availablePicklistChoices: string[]): string {

        const commaJoinedPicklistChoices = availablePicklistChoices.join("','");
        const fakeMultiSelectRecipeValue = `${this.openingRecipeSyntax} (';').join((fake.random_sample(elements=('${commaJoinedPicklistChoices}')))) ${this.closingRecipeSyntax}`;
        return fakeMultiSelectRecipeValue;

    }

    buildDependentPicklistRecipeFakerValue(
                        controllingValueToPicklistOptions: Record<string, string[]>, 
                        recordTypeByAvailablePicklistValues: Record<string, object>,
                        controllingField: string
                    ): string {
    
        let fakeDependentPicklistRecipeValue = "";
        let allMultiSelectChoiceRecipe:string;
        for ( const controllingValueKey in controllingValueToPicklistOptions ) {
            
            let randomChoicesBreakdown:string;

            let picklistValuesAvailableForChoice = controllingValueToPicklistOptions[controllingValueKey];
            // get initial list of all available picklist values before record type sections
            picklistValuesAvailableForChoice.forEach( value => {

                if (randomChoicesBreakdown) {
                    const newLineBreak = `\n`;
                    randomChoicesBreakdown += `${newLineBreak}${this.generateTabs(5)}- ${value}`;
                } else {
                    randomChoicesBreakdown = `- ${value}`;
                }

            });   

            // for ( const recordTypeKey in recordTypeByAvailablePicklistValues ) {
                
            //     let recordTypeValues = recordTypeByAvailablePicklistValues[recordTypeKey];
               
            //     for ( let i = 0; i < recordTypeValues.length; i++ ) {

            //         const recordTypeValue = recordTypeValues[i];
            //         if (i === 0) {
            //             // capture first iteration to create dedicated section for unique recordtype
            //             const newLineBreak = `\n`;
            //             randomChoicesBreakdown += `${newLineBreak}${this.generateTabs(5)}- ${recordTypeValue}`;
            //         } else {
            //             randomChoicesBreakdown = `- ${recordTypeValue}`;
            //         }     

            //     }           
            
            // }

       


            let multiSelectChoiceRecipe = 
`${this.generateTabs(2)}- choice:
${this.generateTabs(3)}when: ${this.openingRecipeSyntax} ${controllingField} == '${controllingValueKey}' }}
${this.generateTabs(3)}pick:
${this.generateTabs(4)}random_choice:
${this.generateTabs(5)}${randomChoicesBreakdown}`;


            if (!(allMultiSelectChoiceRecipe)) {
                allMultiSelectChoiceRecipe = multiSelectChoiceRecipe;
            } else {
                const lineBreakMultiSelectChoiceRecipe = `\n${multiSelectChoiceRecipe}`;
                allMultiSelectChoiceRecipe += lineBreakMultiSelectChoiceRecipe;
            }
        }

        if (fakeDependentPicklistRecipeValue) {
            fakeDependentPicklistRecipeValue += `\n${this.generateTabs(2)}${allMultiSelectChoiceRecipe}`;
        } else {
            fakeDependentPicklistRecipeValue = `\n${this.generateTabs(1.5)}if:`;
            fakeDependentPicklistRecipeValue += `\n${allMultiSelectChoiceRecipe}`;
        }

        return fakeDependentPicklistRecipeValue;

    }

    buildPicklistRecipeValueByXMLFieldDetail(availablePicklistChoices: string[]): string {

        const commaJoinedPicklistChoices = availablePicklistChoices.join("','");
        const fakeRecipeValue = `${this.openingRecipeSyntax} random_choice('${commaJoinedPicklistChoices}') ${this.closingRecipeSyntax}`;
        return fakeRecipeValue;

    }

}