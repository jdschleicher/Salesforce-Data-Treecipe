import { SnowfakeryFakerService } from "../SnowfakeryFakerService";

describe('getMapSalesforceFieldToFakerValue', () => {

    const snowfakerService = new SnowfakeryFakerService();
    const fieldTypeToSnowfakeryMappings = snowfakerService.getMapSalesforceFieldToFakerValue();
    const placeholderForXMLMarkupDependentValue = 'GENERATED BY FIELD XML MARKUP';
    const referenceValuePlaceholder = '"TODO -- REFERENCE ID REQUIRED"';
    const seeOnePagerPlaceholder = '"SEE ONE PAGER - https://gist.github.com/jdschleicher/4abfd188a933598833285ee76e560445"';

    test('Text field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['text']).toBe('${{fake.text(max_nb_chars=50)}}');
    });

    test('TextArea field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['textarea']).toBe('${{fake.paragraph()}}');
    });

    test('LongTextArea field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['longtextarea']).toBe('${{fake.text(max_nb_chars=1000)}}');
    });

    test('RichTextArea field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['richtextarea']).toBe('${{fake.text(max_nb_chars=1000)}}');
    });

    test('Email field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['email']).toBe('${{fake.email()}}');
    });

    test('Phone field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['phone']).toBe('${{fake.phone_number()}}');
    });

    test('Url field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['url']).toBe('${{fake.url()}}');
    });

    test('Number field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['number']).toBe('${{fake.random_int(min=0, max=999999)}}');
    });

    test('Currency field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['currency']).toBe('${{fake.pydecimal(left_digits=6, right_digits=2, positive=True)}}');
    });

    test('Percent field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['percent']).toBe('${{fake.pydecimal(left_digits=2, right_digits=2, positive=True)}}');
    });

    test('Date field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['date']).toBe('${{date(fake.date_between(start_date="-1y", end_date="today"))}}');
    });

    test('DateTime field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['datetime']).toBe('${{fake.date_time_between(start_date="-1y", end_date="now")}}');
    });

    test('Time field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['time']).toBe('${{fake.time()}}');
    });

    test('Picklist field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['picklist']).toBe(placeholderForXMLMarkupDependentValue);
    });

    test('MultiselectPicklist field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['multiselectpicklist']).toBe(placeholderForXMLMarkupDependentValue);
    });

    test('Checkbox field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['checkbox']).toBe('${{fake.boolean()}}');
    });

    test('Lookup field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['lookup']).toBe(referenceValuePlaceholder);
    });

    test('MasterDetail field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['masterdetail']).toBe(referenceValuePlaceholder);
    });

    test('Formula field returns correct message', () => {
        expect(fieldTypeToSnowfakeryMappings['formula']).toBe('Formula fields are calculated, not generated');
    });

    test('Location field returns correct faker expression', () => {
        expect(fieldTypeToSnowfakeryMappings['location']).toBe(seeOnePagerPlaceholder);
    });

    test('All Salesforce field types have a corresponding mapping', () => {
        const expectedFields = [
            'text', 'textarea', 'longtextarea', 'richtextarea', 'email', 
            'phone', 'url', 'number', 'currency', 'percent', 'date', 
            'datetime', 'time', 'picklist', 'multiselectpicklist', 'checkbox', 
            'lookup', 'masterdetail', 'formula', 'location'
        ];

        expectedFields.forEach(field => {
            expect(fieldTypeToSnowfakeryMappings).toHaveProperty(field);
        });
    });

    test('All mapping values are strings', () => {
        Object.values(fieldTypeToSnowfakeryMappings).forEach(value => {
            expect(typeof value).toBe('string');
        });
    });

});