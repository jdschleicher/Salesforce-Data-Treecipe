


    #   "MultiPicklist__c": "chorizo;steak;pork;tofu",
    #   "Picklist__c": "cle"

# - object: Case
#   nickname: Case_NickName
#   count: 1
#   fields:
#     Subject: {{faker.company.catchPhrase()}}'
#     Description: {{faker.lorem.paragraph()}}'
#     Status: {{faker.helpers.arrayElement(['New', 'Working', 'Escalated', 'Closed'])}}'
#     Origin: {{faker.helpers.arrayElement(['Email', 'Phone', 'Web', 'Social'])}}'
#     Priority: {{faker.helpers.arrayElement(['High', 'Medium', 'Low'])}}'
#     Type: {{faker.helpers.arrayElement(['Problem', 'Feature Request', 'Question'])}}'
#     Reason: {{faker.helpers.arrayElement(['Installation', 'Equipment Complexity', 'Performance', 'Breakdown', 'Equipment Design', 'Feedback'])}}'
#     SuppliedName: {{faker.person.fullName()}}'
#     SuppliedEmail: {{faker.internet.email()}}'
#     SuppliedPhone: {{faker.phone.number({style:'national'})}}'
#     SuppliedCompany: {{faker.company.name()}}'
#     PotentialLiability__c: faker.helpers.arrayElement(['No','Yes'])
#     ProductId: ### TODO -- REFERENCE ID REQUIRED
#     Product__c: faker.helpers.arrayElement(['GC1040','GC1060','GC3020','GC3040','GC3060','GC5020','GC5040','GC5060','GC1020'])
#     SLAViolation__c: faker.helpers.arrayElement(['No','Yes'])
#     SlaExitDate: ### TODO -- REVIEW THIS LINE TO DETERMINE IF IT SHOULD BE REMOVED - IN THE FIELD FILE THERE IS NO TYPE DEFINITION IN XML MARKUP - THIS FIELD'S VALUE MAY BE AUTO GENERATED BY SALESFORCE
#     SlaStartDate: ### TODO -- REVIEW THIS LINE TO DETERMINE IF IT SHOULD BE REMOVED - IN THE FIELD FILE THERE IS NO TYPE DEFINITION IN XML MARKUP - THIS FIELD'S VALUE MAY BE AUTO GENERATED BY SALESFORCE
#     Vehicle__c: ### TODO -- REFERENCE ID REQUIRED

- object: Example_Everything__c
  nickname: Example_Everything__c_NickName
  count: 1
  fields:
    date: "${{faker.date.between({from: (new Date().setDate(new Date().getDate() - 30), to: (new Date().setDate(new Date().getDate() + 90) })}}",
    MultiPicklist__c: '${{ (faker.helpers.arrayElements(["chicken","chorizo","egg","fish","pork","steak","tofu"])).join(";") }}'
    Picklist__c: "${{ faker.helpers.arrayElement(['cle','eastlake','madison','mentor','wickliffe','willoughby']) }}"
    DependentPicklist__c: 
      if:
        - choice:
            when: "Picklist__c == 'cle'"
            pick:
                random_choice:
                    - tree
                    - weed
                    - mulch
                    - rocks
        - choice:
            when: "Picklist__c == 'eastlake'"
            pick:
                random_choice:
                    - tree
                    - weed
                    - mulch
        - choice:
            when: "Picklist__c == 'madison'"
            pick:
                random_choice:
                    - tree
                    - plant
                    - weed
        - choice:
            when: "Picklist__c == 'willoughby'"
            pick:
                random_choice:
                    - tree
                    - weed
                    - mulch
        - choice:
            when: "Picklist__c == 'mentor'"
            pick:
                random_choice:
                    - plant
                    - weed
        - choice:
            when: "Picklist__c == 'wickliffe'"
            pick:
                random_choice:
                    - weed
                    - rocks
    Email__c: '${{ faker.internet.email() }}'
    Formula__c: '${{ faker.number.int({min: 0, max: 999999}) }}'
    Geolocation__c: "### TODO -- SEE ONE PAGER - https://gist.github.com/jdschleicher/4abfd188a933598833285ee76e560445"
    Number__c: '${{ faker.number.int({min: 0, max: 999999}) }}'
    Percent__c: '${{ faker.number.float({ min: 0, max: 99, precision: 0.01 }).toFixed(2) }}'
    Phone__c: '${{ faker.phone.number({style:"national"}) }}'
    RichTextAreaHtml__c: '${{ faker.lorem.text(1000) }}'
    TextAreaRich__c: '${{ faker.lorem.text(1000) }}'
    Text_Area_Long__c: '${{ faker.lorem.text(1000) }}'
    Text__c: '${{ faker.lorem.text(50) }}'
    Time__c: '${{ faker.date.between({ from: new Date("1970-01-01T00:00:00Z"), to: new Date("1970-01-01T23:59:59Z") }).toISOString().split("T")[1] }}'
    Url__c: '${{ faker.internet.url() }}'
    gfh__c: 
      if:
        - choice:
            when: "nv__c == 'a'"
            pick:
                random_choice:
                    - 1
                    - 2
        - choice:
            when: "nv__c == 'b'"
            pick:
                random_choice:
                    - 3
        - choice:
            when: "nv__c == 'c'"
            pick:
                random_choice:
                    - 3
                    - 4
    # MultiPicklist__c: '${{ (faker.helpers.arrayElements(["chicken","chorizo","egg","fish","pork","steak","tofu"])).join(";") }}'
    # Checkbox__c: '${{ faker.datatype.boolean() }}'
    # Currency__c: '${{ faker.finance.amount(0, 999999, 2) }}'
    # DateTime__c: '${{ faker.date.between({ from: new Date("2023-01-01T00:00:00Z"), to: new Date() }).toISOString() }}'
    # Date__c: '${{ faker.date.between({ from: new Date("2023-01-01"), to: new Date() }).toISOString().split("T")[0] }}'
   
